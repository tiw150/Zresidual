# making it all in (tstart, tstop) format
Y <- Surv(rep(0, nrow(Y)), Y[,1], Y[,2])
}
# this one gives the baseline cumulative hazard at all the time points;
getchz <- function(Y, explp) {
death <- (Y[, ncol(Y)] == 1) # this is a TRUE FALSE for the status column
dtime <- Y[, ncol(Y) - 1] # this is the tstop
time <- sort(unique(dtime)) # unique tstops
nevent <- as.vector(rowsum(1 * death, dtime))
nrisk <- rev(cumsum(rev(rowsum(explp, dtime)))) # This gives the sum
delta <- min(diff(time))/2
etime <- c(sort(unique(Y[, 1])), max(Y[, 1]) + delta)  #unique entry times
indx <- approx(etime, 1:length(etime), time, method = "constant",
rule = 2, f = 1)$y
esum <- rev(cumsum(rev(rowsum(explp, Y[, 1]))))  #not yet entered
nrisk <- nrisk - c(esum, 0)[indx]
haz <- nevent/nrisk
cumhaz <- cumsum(haz)
out<-data.frame(time = time, haz = haz, cumhaz = cumhaz)
return (out)
}
df<-getchz(Y=Y,explp=explp)
t<-df$time
haz<-df$haz
H_0<-df$cumhaz
f <- stepfun(t[-1], H_0)
H0<-f(Y[,2])
#Survival Function
SP<- exp(-z_hat*as.vector(exp(lp))*H0)
censored <- which(Y[,3]==0)
n.censored <- length(censored)
#Z-residual
Zresid<-matrix(0,length(SP),n.rep)
col_name<-rep(0,n.rep)
for(i in 1:n.rep){
RSP <- SP
RSP[censored] <- RSP[censored]*runif(n.censored)
Zresid[,i] <- -qnorm(RSP)
col_name[i]<-paste("Z-residual ",i,sep = "")
}
colnames(Zresid)<- col_name
#####
censored.status<- (as.matrix(Y)[,-1])[,2]
Zresid.value<-as.matrix(Zresid)
attributes(Zresid.value) <- c(attributes(Zresid.value), list(
Survival.Prob= SP,
linear.pred = lp,
covariates = fix_var,
censored.status= censored.status,
object.model.frame=mf
))
}
##########serve for cv function.
if(!is.null(traindata) & !is.null(newdata)){
form<-(fit_coxph$formula)[[3]]
group_id_name<-gsub(".*[(]([^.]+)[,].*", "\\1", form)[3]
if(!is.factor(traindata[[group_id_name]])) stop("The group ID must be factor!")
if(!is.factor(newdata[[group_id_name]])) stop("The group ID must be factor!")
gpnumber<-length(levels(traindata[[group_id_name]]))
mf <- model.frame(fit_coxph$formula, traindata)
mf_nc<-ncol (mf)
mm <- model.matrix(fit_coxph$formula, traindata)
mm_nc <- ncol (mm)
if(gpnumber>5){
fix_var<-mm[,-c(1,mm_nc),drop=FALSE]
explp<-exp(fix_var %*% fit_coxph$coefficients+fit_coxph$frail[mf[,mf_nc]])
z_hat<-exp(fit_coxph$frail[mf[,mf_nc]])
}
if(gpnumber<=5){
fix_var<-mm[,-c(1,mf_nc:mm_nc),drop=FALSE]
coef_number<- ncol(fix_var)
frailty<-fit_coxph$coefficients[coef_number+1:gpnumber]
explp<-exp(fix_var %*% fit_coxph$coefficients[1:coef_number]+
frailty[mf[,mf_nc]])
z_hat<-exp(frailty[mf[,mf_nc]])
}
Y <- mf[[1]]
if(!inherits(Y, "Surv")) stop("left hand side not a survival object")
if(ncol(Y) != 3) {
# making it all in (tstart, tstop) format
Y <- Surv(rep(0, nrow(Y)), Y[,1], Y[,2])
}
# this one gives the baseline cumulative hazard at all the time points;
getchz <- function(Y, explp) {
death <- (Y[, ncol(Y)] == 1) # this is a TRUE FALSE for the status column
dtime <- Y[, ncol(Y) - 1] # this is the tstop
time <- sort(unique(dtime)) # unique tstops
nevent <- as.vector(rowsum(1 * death, dtime))
nrisk <- rev(cumsum(rev(rowsum(explp, dtime)))) # This gives the sum
delta <- min(diff(time))/2
etime <- c(sort(unique(Y[, 1])), max(Y[, 1]) + delta)  #unique entry times
indx <- approx(etime, 1:length(etime), time, method = "constant",
rule = 2, f = 1)$y
esum <- rev(cumsum(rev(rowsum(explp, Y[, 1]))))  #not yet entered
nrisk <- nrisk - c(esum, 0)[indx]
haz <- nevent/nrisk
cumhaz <- cumsum(haz)
out<-data.frame(time = time, haz = haz, cumhaz = cumhaz)
return (out)
}
df<-getchz(Y=Y,explp=explp)
t<-df$time
haz<-df$haz
H_0<-df$cumhaz
f <- stepfun(t[-1], H_0)
full_data<-rbind(newdata,traindata)
mf_new<-model.frame(fit_coxph$formula,full_data)[c(1:nrow(newdata)),]
mf_nc_new<- ncol (mf_new)
mm_new <-model.matrix(fit_coxph$formula,full_data)[c(1:nrow(newdata)),,drop=FALSE]
mm_nc_new <- ncol (mm_new)
if(gpnumber>5){
fix_var_new<-mm_new[,-c(1,mm_nc_new),drop=FALSE]
z_hat_new<-exp(fit_coxph$frail[mf_new[,mf_nc_new]])
lp_new<-fix_var_new %*% fit_coxph$coefficients+fit_coxph$frail[mf_new[,mf_nc_new]]
explp_new<-exp(fix_var_new %*% fit_coxph$coefficients)
}
if(gpnumber<=5){
fix_var_new<-mm_new[,-c(1,mf_nc_new:mm_nc_new),drop=FALSE]
coef_number_new<- ncol(fix_var_new)
frailty_new<-fit_coxph$coefficients[coef_number_new+1:gpnumber]
lp_new<-fix_var_new %*% fit_coxph$coefficients[1:coef_number_new]+frailty_new[mf_new[,mf_nc_new]]
explp_new<-exp(fix_var_new %*% fit_coxph$coefficients[1:coef_number_new])
z_hat_new<-as.numeric(exp(frailty_new[mf_new[,mf_nc_new]]))
}
Y_new <- mf_new[[1]]
if(!inherits(Y_new, "Surv")) stop("left hand side not a survival object")
if(ncol(Y_new) != 3) {
# making it all in (tstart, tstop) format
Y_new <- Surv(rep(0, nrow(Y_new)), Y_new[,1], Y_new[,2])
}
H0_new<-f(Y_new[,2])
#Survival Function
SP<- exp(-z_hat_new*as.vector(explp_new)*H0_new)
censored <- which(Y_new[,3]==0)
n.censored <- length(censored)
#Z-residual
Zresid<-matrix(0,length(SP),n.rep)
for(i in 1:n.rep){
RSP <- SP
RSP[censored] <- RSP[censored]*runif(n.censored)
Zresid[,i] <- -qnorm(RSP)
col_name<-paste("Z-residual ",i,sep = "")
colnames(Zresid)[i]<- col_name
}
#####
censored.status<- (as.matrix(Y_new)[,-1])[,2]
Zresid.value<-as.matrix(Zresid)
attributes(Zresid.value) <- c(attributes(Zresid.value), list(
Survival.Prob= SP,
linear.pred = lp_new,
covariates = fix_var_new,
censored.status= censored.status,
object.model.frame=mf_new
))
}
return(Zresid.value)
}
a<-Zresidual.coxph.frailty(fit_LeukSurv_wbc,n.rep = nrep,traindata=NULL,newdata = NULL)
View(a)
?coxph
library(survival)
?coxph
# data simulation
n <- 100
# fixed model coefficients
beta0 <- -1 # -1 (p=0.3) / 1 (p=0.6)
beta1 <- -1
alpha0 <- 2
alpha1 <- 8
id <- 1:n
x <- rnorm(n, 0, 1) # fixed variable
# random model coefficients
tau0 <- 0.1
tau1 <- 0.2
rho <- 0.2
cov_mx <- matrix(c(tau0^2, rho*tau0*tau1, rho*tau0*tau1, tau1^2),
nrow = 2, byrow = TRUE) # covariance matrix
u <- MASS::mvrnorm(n, mu = c(0,0), Sigma = cov_mx)
u1 <- u[,1]
# parameter computation
logit_p <- beta0 + beta1*x
log_mu <- alpha0 + alpha1*x+ u1
p <- exp(logit_p) / (1 + exp(logit_p))
mu <- exp(log_mu)
zeros <- rbinom(n, 1, p)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
while(sum(is.na(y1)) != 0){
y1 <- (1-zeros)*rztnbinom(n, size, prob)
}
j <- 5 # number of randomized fixed effect
sample_experiment <- lapply(
1:j,
function(x) {
list('z' = rnorm(n,0,1))
}
)
z <- data.frame(dplyr::bind_cols(sample_experiment))
z_names <- paste0("z", seq(1,j))
colnames(z) <- z_names
data_hnb <- data.frame(id, x, u1, z, y1, zeros)
zero_prob <- sum(data_hnb$zeros) / n
mean(mu)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
# Load packages
pacman::p_load(extraDistr, actuar, VGAM, DPQ, brms, xtable, tidyverse,loo)
# data simulation
n <- 100
# fixed model coefficients
beta0 <- -1 # -1 (p=0.3) / 1 (p=0.6)
beta1 <- -1
alpha0 <- 2
alpha1 <- 8
id <- 1:n
x <- rnorm(n, 0, 1) # fixed variable
# random model coefficients
tau0 <- 0.1
tau1 <- 0.2
rho <- 0.2
cov_mx <- matrix(c(tau0^2, rho*tau0*tau1, rho*tau0*tau1, tau1^2),
nrow = 2, byrow = TRUE) # covariance matrix
u <- MASS::mvrnorm(n, mu = c(0,0), Sigma = cov_mx)
u1 <- u[,1]
# parameter computation
logit_p <- beta0 + beta1*x
log_mu <- alpha0 + alpha1*x+ u1
p <- exp(logit_p) / (1 + exp(logit_p))
mu <- exp(log_mu)
zeros <- rbinom(n, 1, p)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
while(sum(is.na(y1)) != 0){
y1 <- (1-zeros)*rztnbinom(n, size, prob)
}
j <- 5 # number of randomized fixed effect
sample_experiment <- lapply(
1:j,
function(x) {
list('z' = rnorm(n,0,1))
}
)
z <- data.frame(dplyr::bind_cols(sample_experiment))
z_names <- paste0("z", seq(1,j))
colnames(z) <- z_names
data_hnb <- data.frame(id, x, u1, z, y1, zeros)
zero_prob <- sum(data_hnb$zeros) / n
mean(mu)
fit_hnb <- brm(bf(y1 ~ x + z1 + z2 + z3 + z4 + z5+(1|id),
hu ~x + z1 + z2 + z3 + z4 + z5),
data = data_hnb,
family = hurdle_negbinomial(link = "log",
link_shape = "identity",
link_hu = "logit"))
fit_hnb <- brm(bf(y1 ~ x + z1 + z2 + z3 + z4 + z5+(1|id),
hu ~x + z1 + z2 + z3 + z4 + z5),
data = data_hnb,
family = hurdle_negbinomial(link = "log",
link_shape = "identity",
link_hu = "logit"))
####################################################
#################### TRUE MODEL ####################
####################################################
fit_hnb <- brm(bf(y1 ~ x + z1 + z2 + z3 + z4 + z5,
hu ~x + z1 + z2 + z3 + z4 + z5),
data = data_hnb,
family = hurdle_negbinomial(link = "log",
link_shape = "identity",
link_hu = "logit"))
# data simulation
n <- 100
# fixed model coefficients
beta0 <- -1 # -1 (p=0.3) / 1 (p=0.6)
beta1 <- -1
alpha0 <- 2
alpha1 <- 8
id <- 1:n
x <- rnorm(n, 0, 1) # fixed variable
# random model coefficients
tau0 <- 0.1
tau1 <- 0.2
rho <- 0.2
cov_mx <- matrix(c(tau0^2, rho*tau0*tau1, rho*tau0*tau1, tau1^2),
nrow = 2, byrow = TRUE) # covariance matrix
u <- MASS::mvrnorm(n, mu = c(0,0), Sigma = cov_mx)
u1 <- u[,1]
#u2 <- u[,2]
# parameter computation
logit_p <- beta0 + beta1*x
log_mu <- alpha0 + alpha1*x+ u1
p <- exp(logit_p) / (1 + exp(logit_p))
mu <- exp(log_mu)
zeros <- rbinom(n, 1, p)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
while(sum(is.na(y1)) != 0){
y1 <- (1-zeros)*rztnbinom(n, size, prob)
}
j <- 5 # number of randomized fixed effect
sample_experiment <- lapply(
1:j,
function(x) {
list('z' = rnorm(n,0,1))
}
)
z <- data.frame(dplyr::bind_cols(sample_experiment))
z_names <- paste0("z", seq(1,j))
colnames(z) <- z_names
data_hnb <- data.frame(id, x, u1, z, y1, zeros)
zero_prob <- sum(data_hnb$zeros) / n
mean(mu)
# data simulation
n <- 100
# fixed model coefficients
beta0 <- -1 # -1 (p=0.3) / 1 (p=0.6)
beta1 <- -1
alpha0 <- 2
alpha1 <- 8
id <- 1:n
x <- rnorm(n, 0, 1) # fixed variable
# random model coefficients
tau0 <- 0.1
tau1 <- 0.2
rho <- 0.2
cov_mx <- matrix(c(tau0^2, rho*tau0*tau1, rho*tau0*tau1, tau1^2),
nrow = 2, byrow = TRUE) # covariance matrix
u <- MASS::mvrnorm(n, mu = c(0,0), Sigma = cov_mx)
u1 <- u[,1]
#u2 <- u[,2]
# parameter computation
logit_p <- beta0 + beta1*x
log_mu <- alpha0 + alpha1*x+ u1
p <- exp(logit_p) / (1 + exp(logit_p))
mu <- exp(log_mu)
zeros <- rbinom(n, 1, p)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
while(sum(is.na(y1)) != 0){
y1 <- (1-zeros)*rztnbinom(n, size, prob)
}
# data simulation
n <- 100
# fixed model coefficients
beta0 <- -1 # -1 (p=0.3) / 1 (p=0.6)
beta1 <- -1
alpha0 <- 2
alpha1 <- 8
id <- 1:n
x <- rnorm(n, 0, 1) # fixed variable
# random model coefficients
tau0 <- 0.1
tau1 <- 0.2
rho <- 0.2
cov_mx <- matrix(c(tau0^2, rho*tau0*tau1, rho*tau0*tau1, tau1^2),
nrow = 2, byrow = TRUE) # covariance matrix
u <- MASS::mvrnorm(n, mu = c(0,0), Sigma = cov_mx)
u1 <- u[,1]
#u2 <- u[,2]
# parameter computation
logit_p <- beta0 + beta1*x
log_mu <- alpha0 + alpha1*x+ u1
p <- exp(logit_p) / (1 + exp(logit_p))
mu <- exp(log_mu)
zeros <- rbinom(n, 1, p)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
while(sum(is.na(y1)) != 0){
y1 <- (1-zeros)*rztnbinom(n, size, prob)
}
# data simulation
n <- 100
# fixed model coefficients
beta0 <- -1 # -1 (p=0.3) / 1 (p=0.6)
beta1 <- -1
alpha0 <- 2
alpha1 <- 8
id <- 1:n
x <- rnorm(n, 0, 1) # fixed variable
# random model coefficients
tau0 <- 0.1
tau1 <- 0.2
rho <- 0.2
cov_mx <- matrix(c(tau0^2, rho*tau0*tau1, rho*tau0*tau1, tau1^2),
nrow = 2, byrow = TRUE) # covariance matrix
u <- MASS::mvrnorm(n, mu = c(0,0), Sigma = cov_mx)
u1 <- u[,1]
#u2 <- u[,2]
# parameter computation
logit_p <- beta0 + beta1*x
log_mu <- alpha0 + alpha1*x+ u1
p <- exp(logit_p) / (1 + exp(logit_p))
mu <- exp(log_mu)
zeros <- rbinom(n, 1, p)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
while(sum(is.na(y1)) != 0){
y1 <- (1-zeros)*rztnbinom(n, size, prob)
}
# data simulation
n <- 100
# fixed model coefficients
beta0 <- -1 # -1 (p=0.3) / 1 (p=0.6)
beta1 <- -1
alpha0 <- 2
alpha1 <- 8
id <- 1:n
x <- rnorm(n, 0, 1) # fixed variable
# random model coefficients
tau0 <- 0.1
tau1 <- 0.2
rho <- 0.2
cov_mx <- matrix(c(tau0^2, rho*tau0*tau1, rho*tau0*tau1, tau1^2),
nrow = 2, byrow = TRUE) # covariance matrix
u <- MASS::mvrnorm(n, mu = c(0,0), Sigma = cov_mx)
u1 <- u[,1]
#u2 <- u[,2]
# parameter computation
logit_p <- beta0 + beta1*x
log_mu <- alpha0 + alpha1*x+ u1
p <- exp(logit_p) / (1 + exp(logit_p))
mu <- exp(log_mu)
zeros <- rbinom(n, 1, p)
size <- 1.5
prob <- size / (size + mu)
y1 <- (1-zeros)*rztnbinom(n, size, prob)
while(sum(is.na(y1)) != 0){
y1 <- (1-zeros)*rztnbinom(n, size, prob)
}
j <- 5 # number of randomized fixed effect
sample_experiment <- lapply(
1:j,
function(x) {
list('z' = rnorm(n,0,1))
}
)
z <- data.frame(dplyr::bind_cols(sample_experiment))
z_names <- paste0("z", seq(1,j))
colnames(z) <- z_names
data_hnb <- data.frame(id, x, u1, z, y1, zeros)
zero_prob <- sum(data_hnb$zeros) / n
mean(mu)
####################################################
#################### TRUE MODEL ####################
####################################################
fit_hnb <- brm(bf(y1 ~ x + z1 + z2 + z3 + z4 + z5,
hu ~x + z1 + z2 + z3 + z4 + z5),
data = data_hnb,
family = hurdle_negbinomial(link = "log",
link_shape = "identity",
link_hu = "logit"))
####################################################
#################### TRUE MODEL ####################
####################################################
fit_hnb <- brm(bf(y1 ~ x + z1 + z2 + z3 + z4 + z5,
hu ~x + z1 + z2 + z3 + z4 + z5),
data = data_hnb,
family = hurdle_negbinomial(link = "log",
link_shape = "identity",
link_hu = "logit"))
# Load packages
pacman::p_load(extraDistr, actuar, VGAM, DPQ, brms, xtable, tidyverse,loo)
# data simulation
n <- 100
# fixed model coefficients
beta0 <- -1 # -1 (p=0.3) / 1 (p=0.6)
beta1 <- -1
alpha0 <- 2
alpha1 <- 8
id <- 1:n
x <- rnorm(n, 0, 1) # fixed variable
# random model coefficients
tau0 <- 0.1
tau1 <- 0.2
rho <- 0.2
cov_mx <- matrix(c(tau0^2, rho*tau0*tau1, rho*tau0*tau1, tau1^2),
nrow = 2, byrow = TRUE) # covariance matrix
u <- MASS::mvrnorm(n, mu = c(0,0), Sigma = cov_mx)
u1 <- u[,1]
# parameter computation
logit_p <- beta0 + beta1*x
log_mu <- alpha0 + alpha1*x+ u1
p <- exp(logit_p) / (1 + exp(logit_p))
mu <- exp(log_mu)
zeros <- rbinom(n, 1, p)
size <- 1.5
0.18 + 0.42  + 0.12  + 0.04
1-0.76
0.18 + 0.42 + 0.12
0.12 + 0.12 + 0.04 =
0.12 + 0.12 + 0.04
0 *0.18 + 1 * 0.42 + 2 * 0.12 + 3 * 0.12 + 4 * 0.12 + 5 * 0.04
02 * 0.18+12 * 0.42+22 * 0.12+32 * 0.12+42 * 0.12+52 * 0.04
0 * 0.18+1 * 0.42+4 * 0.12+9 * 0.12+16 * 0.12+25 * 0.04
4.9-1.7^2
sqrt(2.01)
(0.8)^4* (0.2)
730/365
1/2.5
0.4*0.5
1-exp(0.2)
1-exp(-0.2)
50/23
